package dellstore.dao
import com.googlecode.mapperdao.MapperDao
import com.googlecode.mapperdao.QueryDao
import com.googlecode.mapperdao.utils.IntIdCRUD
import com.googlecode.mapperdao.utils.IntIdAll
import dellstore.model.Customer
import com.googlecode.mapperdao.Entity
import com.googlecode.mapperdao.IntId
import dellstore.model.Gender
import com.googlecode.mapperdao.ValuesMap
import dellstore.model.Address
import dellstore.model.CreditCard
import com.googlecode.mapperdao.Persisted
import com.googlecode.mapperdao.Query
import com.googlecode.mapperdao.utils.TransactionalIntIdCRUD

/**
 * @author kostantinos.kougios
 *
 * 1 Sep 2011
 */
abstract class CustomerDao extends TransactionalIntIdCRUD[Customer] with IntIdAll[Customer] {
	import CustomerDao._
	import queryDao._
	val entity = CustomerEntity
	import Query._

	private val c = CustomerEntity

	def byState(state: String): List[Customer with IntId] = query(select from c where c.state === state)
}

object CustomerDao {
	object CustomerEntity extends Entity[IntId, Customer]("customers", classOf[Customer]) {
		val customerId = intAutoGeneratedPK("customerid", _.id)

		val firstname = string("firstname", _.firstName)
		val lastname = string("lastname", _.lastName)
		// address is an embedded class, but it easy to configure.
		val address1 = string("address1", _.address.address1)
		val address2 = string("address2", _.address.address2)
		val city = string("city", _.address.city)
		val state = string("state", _.address.state)
		val zip = int("zip", _.address.zip)
		val country = string("country", _.address.country)
		val region = int("region", _.address.region)
		// end of address config
		val email = string("email", _.email)
		val phone = string("phone", _.phone)
		// embedded CreditCard class
		val creditcardtype = int("creditcardtype", _.creditCard.cardType)
		val creditcard = string("creditcard", _.creditCard.card)
		val creditcardexpiration = string("creditcardexpiration", _.creditCard.expiration)
		// end of CreditCard config
		val username = string("username", _.userName)
		val password = string("password", _.password)
		val age = int("age", _.age)
		val income = int("income", _.income)
		// the Gender is stored as String in the db but it is modeled as an Enumeration 
		val gender = string("gender", customer => Gender.toString(customer.gender))

		// constructor
		val constructor = (m: ValuesMap) => {
			// instantiate the embedded entities
			val address = Address(m(address1), m(address2), m(city), m(state), m(zip), m(country), m(region))
			val creditCard = CreditCard(m(creditcardtype), m(creditcard), m(creditcardexpiration))
			val g = Gender.fromString(m(gender))
			new Customer(m(firstname), m(lastname), address, m(email), m(phone), creditCard, m(username), m(password), m(age), m(income), g) with Persisted with IntId {
				val valuesMap = m
				val id = m(customerId)
			}
		}
	}
}