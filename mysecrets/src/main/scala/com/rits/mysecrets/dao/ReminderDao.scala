package com.rits.mysecrets.dao
import com.googlecode.mapperdao.Entity
import com.rits.mysecrets.model.Reminder
import com.googlecode.mapperdao.IntId
import com.rits.mysecrets.model.Weekly
import com.rits.mysecrets.model.Daily
import com.rits.mysecrets.model.RemindOnce
import com.rits.mysecrets.model.User
import com.googlecode.mapperdao.ValuesMap
import com.googlecode.mapperdao.Persisted

/**
 * @author kostantinos.kougios
 *
 * 22 Sep 2011
 */
class ReminderDao {
	import ReminderDao._
}

object ReminderDao {
	/**
	 * this entity is for a hierarchy of classes which is stored in 1 table.
	 * The "type" column decides which class is stored, 0 for Daily, 1 for Weekly and 2 for RemindOnce
	 */
	object ReminderEntity extends Entity[IntId, Reminder](classOf[Reminder]) {
		val id = intAutoGeneratedPK("id", _.id)
		// we will map the inheritance into the "type" column 
		val t = short("type", {
			case _: Daily => 0 // type=0 for Daily class
			case _: Weekly => 1 // type=1 for Weekly class
			case _: RemindOnce => 2 // type=2 for Monthly class
		})
		val hourOfDay = short("hourOfDay", {
			case daily: Daily => daily.hourOfDay
			case weekly: Weekly => weekly.hourOfDay
			case _: RemindOnce => -1
		})
		val dayOfWeek = short("dayOfWeek", {
			case _: Daily => -1
			case weekly: Weekly => weekly.dayOfWeek
			case _: RemindOnce => -1
		})
		val time = datetime("time", {
			case _: Daily => null
			case _: Weekly => null
			case remindOnce: RemindOnce => remindOnce.time
		})

		val remindUsers = manyToMany(classOf[User], _.remindUsers)

		def constructor(implicit m: ValuesMap) = m.int(t) match {
			case 0 => new Daily(hourOfDay, remindUsers) with IntId with Persisted {
				val id: Int = ReminderEntity.id
			}
			case 1 =>
				new Weekly(hourOfDay, dayOfWeek, remindUsers) with IntId with Persisted {
					val id: Int = ReminderEntity.id
				}
			case 2 => new RemindOnce(time, remindUsers) with IntId with Persisted {
				val id: Int = ReminderEntity.id
			}
		}
	}
}