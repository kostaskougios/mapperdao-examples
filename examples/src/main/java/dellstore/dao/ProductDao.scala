package dellstore.dao
import com.googlecode.mapperdao.Entity
import com.googlecode.mapperdao.IntId
import dellstore.model._
import com.googlecode.mapperdao.ValuesMap
import com.googlecode.mapperdao.Persisted
import com.googlecode.mapperdao.utils.All
import com.googlecode.mapperdao.MapperDao
import com.googlecode.mapperdao.QueryDao
import com.googlecode.mapperdao.utils.IntIdCRUD
import com.googlecode.mapperdao.utils.IntIdAll
import com.googlecode.mapperdao.SimpleEntity
import com.googlecode.mapperdao.Query
import com.googlecode.mapperdao.utils.TransactionalIntIdCRUD

/**
 * @author kostantinos.kougios
 *
 * 30 Aug 2011
 */
abstract class ProductDao extends TransactionalIntIdCRUD[Product] with IntIdAll[Product] {
	import ProductDao._
	val entity = ProductEntity

	import Query._
	import queryDao._

	private val p = ProductEntity

	def idRange(min: Int, max: Int) = query(select from p where p.id >= min and p.id <= max)
}

object ProductDao {
	object InventoryEntity extends SimpleEntity[Inventory]("inventory", classOf[Inventory]) {
		val stock = column("quan_in_stock") to (_.stock)
		val sales = column("sales") to (_.sales)
		val product = onetoone(ProductEntity) foreignkey "prod_id" to (_.product)
		def constructor(implicit m: ValuesMap) = new Inventory(product, stock, sales) with Persisted
	}
	object ProductEntity extends Entity[IntId, Product]("products", classOf[Product]) {
		val id = key("prod_id") autogenerated (_.id)
		val title = column("title") to (_.title)
		val actor = column("actor") to (_.actor)
		val price = column("price") to (_.price)
		val category = manytoone(CategoryDao.CategoryEntity) foreignkey "category" to (_.category)
		val special = column("special") to (v => v.special)
		val inventory = onetoonereverse(InventoryEntity) foreignkey "prod_id" to (_.inventory)

		def constructor(implicit m: ValuesMap) = new Product(category, title, actor, price, special, inventory) with Persisted with IntId {
			val id: Int = ProductEntity.id
		}
	}
}