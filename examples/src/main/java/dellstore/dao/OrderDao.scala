package dellstore.dao
import com.googlecode.mapperdao.utils.IntIdAll
import com.googlecode.mapperdao.utils.IntIdCRUD
import com.googlecode.mapperdao.Entity
import com.googlecode.mapperdao.IntId
import com.googlecode.mapperdao.MapperDao
import com.googlecode.mapperdao.Persisted
import com.googlecode.mapperdao.Query
import com.googlecode.mapperdao.QueryDao
import com.googlecode.mapperdao.SimpleEntity
import com.googlecode.mapperdao.ValuesMap
import dellstore.model.Customer
import dellstore.model.Product
import dellstore.model.Order
import dellstore.model.OrderLine
import com.googlecode.mapperdao.utils.TransactionalIntIdCRUD

/**
 * @author kostantinos.kougios
 *
 * 1 Sep 2011
 */
abstract class OrderDao extends TransactionalIntIdCRUD[Order] with IntIdAll[Order] {
	val entity = OrderEntity

	import Query._
	import queryDao._

	private val o = OrderEntity
	private val c = CustomerEntity

	/**
	 * returns all orders from customers living at the provided state
	 */
	def byState(state: String): List[Order with IntId] = query(select from o join (o, o.customer, c) where c.state === state)
	/**
	 * all orders that the totalamount is between min and max
	 */
	def byTotal(min: Double, max: Double): List[Order with IntId] = query(select from o where o.totalAmount >= min and o.totalAmount <= max)

	def of(customer: Customer) = query(
		select
			from o
			where o.customer === customer
	)
}

object OrderEntity extends Entity[IntId, Order]("orders") {
	val orderid = key("orderid") autogenerated (_.id)
	val date = column("orderdate") to (_.date)
	val customer = manytoone(CustomerEntity) foreignkey "customerid" to (_.customer)
	val netAmount = column("netamount") to (_.netAmount)
	val tax = column("tax") to (_.tax)
	val totalAmount = column("totalamount") to (_.totalAmount)
	val orderLines = onetomany(OrderLineEntity) foreignkey "orderid" to (_.orderLines)

	def constructor(implicit m) = new Order(date, customer, netAmount, tax, totalAmount, orderLines) with Persisted with IntId {
		val id: Int = orderid
	}
}

object OrderLineEntity extends SimpleEntity[OrderLine]("orderlines") {
	val orderlineid = key("orderlineid") to (_.id)
	val order = manytoone(OrderEntity) foreignkey "orderid" to (_.order)
	val product = onetoone(ProductEntity) foreignkey "prod_id" to (_.product)
	val quantity = column("quantity") to (_.quantity)
	val orderdate = column("orderdate") to (_.date)

	def constructor(implicit m) = new OrderLine(orderlineid, order, product, quantity, orderdate) with Persisted
}
